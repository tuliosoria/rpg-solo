"use client";
import { useEffect, useState } from "react";
import Editor from "./Editor";
import RpgSolo from "./RpgSolo";

type SavedGame = {
  version: number;
  timestamp: number;
  chapter: number;
  current: string;
  gameState: any;
  gameStats: any;
  isGameOver?: boolean;
  gameOverReason?: string;
  title?: string;
};

export default function Home() {
  const [view, setView] = useState<"menu" | "game" | "editor">("menu");
  const [save, setSave] = useState<SavedGame | null>(null);
  const [activeInitialLoad, setActiveInitialLoad] = useState<SavedGame | undefined>(undefined);

  useEffect(() => {
    try {
      const raw = localStorage.getItem("rpgsolo_save_v1");
      if (raw) setSave(JSON.parse(raw));
      else setSave(null);
    } catch {
      setSave(null);
    }
  }, [view]);

  if (view === "menu") {
    return (
      <main style={{ minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center', position: 'relative', overflow: 'hidden', background: '#000' }}>
        {/* Background gradient & subtle grid */}
        <div style={{ position: 'absolute', inset: 0, background: 'radial-gradient(circle at 50% 30%, rgba(0,120,60,0.25), transparent 70%)', pointerEvents: 'none' }} />
        <div style={{ position: 'absolute', inset: 0, background: 'linear-gradient(135deg,#00190f 0%,#000000 70%)', opacity: 0.85 }} />
        <div style={{ position: 'absolute', inset: 0, background: 'repeating-linear-gradient(0deg,transparent,transparent 2px,rgba(0,255,128,0.05) 2px,rgba(0,255,128,0.05) 4px)', mixBlendMode: 'overlay', pointerEvents: 'none' }} />

        <section className="panel fade-in-up" style={{ maxWidth: 560, width: '92%', fontFamily: 'var(--font-mono)', background: 'rgba(0,30,15,0.7)', border: '1px solid rgba(0,255,136,0.3)', boxShadow: '0 0 0 1px rgba(0,255,136,0.25), 0 22px 40px -10px rgba(0,0,0,0.6)', backdropFilter: 'blur(6px)' }}>
          <header style={{ textAlign: 'center', marginBottom: 'var(--space-6)' }}>
            <h1 style={{ fontSize: '2rem', margin: '0 0 .3rem', fontFamily: 'var(--font-mono)', letterSpacing: '2px', color: '#00ffaa', textShadow: '0 0 12px rgba(0,255,136,0.5)' }}>â–® RPG SOLO TERMINAL</h1>
            <div style={{ fontSize: '.85rem', letterSpacing: '1px', color: '#b6ffd6', textTransform: 'uppercase' }}>{save?.title || 'CapÃ­tulo 1 â€” O Sinal'}</div>
          </header>

          <div style={{ display: 'flex', flexDirection: 'column', gap: 'var(--space-4)' }}>
            <button className="btn btn-success" style={{ fontSize: '1.05rem', fontFamily: 'var(--font-mono)', letterSpacing: '1px' }} onClick={() => { setActiveInitialLoad(undefined); setView('game'); }}>â–¶ Novo Jogo</button>
            <button className="btn btn-outline" disabled={!save} style={{ fontSize: '.95rem', opacity: save ? 1 : .4, cursor: save ? 'pointer' : 'not-allowed', fontFamily: 'var(--font-mono)', letterSpacing: '1px' }} onClick={() => { if (!save) return; setActiveInitialLoad(save); setView('game'); }}>ðŸ’¾ Carregar</button>
            <button className="btn" style={{ fontSize: '.95rem', background: 'linear-gradient(135deg,#6366f1,#4f46e5)', fontFamily: 'var(--font-mono)', letterSpacing: '1px' }} onClick={() => setView('editor')}>âœ Editor da HistÃ³ria</button>
          </div>

          {save && (
            <div style={{ marginTop: 'var(--space-4)', fontSize: '.7rem', fontFamily: 'var(--font-mono)', color: '#8effc6', letterSpacing: '1px' }}>
              Salvo em {new Date(save.timestamp).toLocaleString()} â€” CapÃ­tulo {save.chapter}
            </div>
          )}

          <footer style={{ marginTop: 'var(--space-6)', fontSize: '.65rem', letterSpacing: '1px', color: '#6ae8b0', opacity: .8 }}>
            Use o botÃ£o Menu dentro do jogo para salvar e voltar.
          </footer>
        </section>
      </main>
    );
  }

  if (view === "editor") {
    return (
      <main>
        <Editor onExitToMenuAction={() => setView("menu")} />
      </main>
    );
  }

  return (
    <main>
      <RpgSolo
        onExitToMenu={() => setView("menu")}
        initialLoad={activeInitialLoad}
      />
    </main>
  );
}
